plugins {
    id 'java'
    id "org.springframework.boot" version "2.0.5.RELEASE"
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id 'io.qameta.allure' version '2.8.1'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = "5.4.1"
    springVersion = "2.0.5.RELEASE"
    lombokVersion = "1.18.8"
    jacksonDataformatXmlVersion = "2.9.0"
    shazamcrestVersion = "0.11"
    restAssured = "4.0.0"
    allureVersion = "2.13.8"
}

allure {
    autoconfigure = true
    aspectjweaver = true
    version = "${allureVersion}"

    useJUnit5 {
        version = "${allureVersion}"
    }

    resultsDir = file('allure-results')
    reportDir = file('allure-reports')
}

dependencies {

    implementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    implementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "junit", module: "junit"
    }
    // Assertions and matchers
    implementation "com.shazam:shazamcrest:${shazamcrestVersion}"
    compile "org.springframework.boot:spring-boot:$springVersion"

    //rest assured
    compile "io.rest-assured:rest-assured:${restAssured}"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation "org.springframework.boot:spring-boot-starter-web"


    compile 'io.rest-assured:json-path:4.0.0'
    compile 'io.rest-assured:xml-path:4.0.0'
    // Allure
    compile "io.qameta.allure:allure-rest-assured:${allureVersion}"
    implementation("io.qameta.allure:allure-junit5:${allureVersion}") {
        exclude group: "org.aspectj", module: "aspectjweaver"
    }
    implementation "io.qameta.allure:allure-assertj:2.13.2"


    test {
        systemProperty 'host', System.getProperty('host')
        useJUnitPlatform()

    }

    task petTest(type: Test) {
        systemProperty 'host', System.getProperty('host')
        useJUnitPlatform {
            includeTags 'pet'
        }
    }

    task orderTest(type: Test) {
        systemProperty 'host', System.getProperty('host')
        useJUnitPlatform {
            includeTags 'store'
        }
    }

}
